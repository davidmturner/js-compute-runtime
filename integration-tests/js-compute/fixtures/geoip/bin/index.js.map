{
  "version": 3,
  "sources": ["../../../assertions.js", "fastly:env", "fastly:geolocation", "../src/index.js"],
  "sourcesContent": ["// Testing/Assertion functions //\n\nexport function pass(message = '') {\n    return new Response(message)\n}\n\nexport function fail(message = '') {\n    return new Response(message, { status: 500 })\n}\n\nexport function assert(actual, expected, code) {\n    if (!deepEqual(actual, expected)) {\n        return fail(`Expected \\`${code}\\` to equal \\`${JSON.stringify(expected)}\\` - Found \\`${JSON.stringify(actual)}\\``)\n    }\n}\n\nexport async function assertResolves(func) {\n    try {\n        await func()\n    } catch (error) {\n        return fail(`Expected \\`${func.toString()}\\` to resolve - Found it rejected: ${error.name}: ${error.message}`)\n    }\n}\n\nexport async function assertRejects(func, errorClass, errorMessage) {\n    try {\n        await func()\n        return fail(`Expected \\`${func.toString()}\\` to reject - Found it did not reject`)\n    } catch (error) {\n        if (errorClass) {\n            if ((error instanceof errorClass) === false) {\n                return fail(`Expected \\`${func.toString()}\\` to reject instance of \\`${errorClass.name}\\` - Found instance of \\`${error.name}\\``)\n            }\n        }\n\n        if (errorMessage) {\n            if (error.message !== errorMessage) {\n                return fail(`Expected \\`${func.toString()}\\` to reject error message of \\`${errorMessage}\\` - Found \\`${error.message}\\``)\n            }\n        }\n    }\n}\n\n\nexport function assertThrows(func, errorClass, errorMessage) {\n    try {\n        func()\n        return fail(`Expected \\`${func.toString()}\\` to throw - Found it did not throw`)\n    } catch (error) {\n        if (errorClass) {\n            if ((error instanceof errorClass) === false) {\n                return fail(`Expected \\`${func.toString()}\\` to throw instance of \\`${errorClass.name}\\` - Found instance of \\`${error.name}\\``)\n            }\n        }\n\n        if (errorMessage) {\n            if (error.message !== errorMessage) {\n                return fail(`Expected \\`${func.toString()}\\` to throw error message of \\`${errorMessage}\\` - Found \\`${error.message}\\``)\n            }\n        }\n    }\n}\n\nexport function assertDoesNotThrow(func) {\n    try {\n        func()\n    } catch (error) {\n        return fail(`Expected \\`${func.toString()}\\` to not throw - Found it did throw: ${error.name}: ${error.message}`)\n    }\n}\n\nexport function deepEqual(a, b) {\n    var aKeys;\n    var bKeys;\n    var typeA;\n    var typeB;\n    var key;\n    var i;\n\n    typeA = typeof a;\n    typeB = typeof b;\n    if (a === null || typeA !== 'object') {\n        if (b === null || typeB !== 'object') {\n            return a === b;\n        }\n        return false;\n    }\n    // Case: `a` is of type 'object'\n    if (typeB !== 'object') {\n        return false;\n    }\n    if (Object.getPrototypeOf(a) !== Object.getPrototypeOf(b)) {\n        return false;\n    }\n    if (a instanceof Date) {\n        return a.getTime() === b.getTime();\n    }\n    if (a instanceof RegExp) {\n        return a.source === b.source && a.flags === b.flags;\n    }\n    if (a instanceof Error) {\n        if (a.message !== b.message || a.name !== b.name) {\n            return false;\n        }\n    }\n\n    aKeys = Object.keys(a);\n    bKeys = Object.keys(b);\n    if (aKeys.length !== bKeys.length) {\n        return false;\n    }\n    aKeys.sort();\n    bKeys.sort();\n\n    // Cheap key test:\n    for (i = 0; i < aKeys.length; i++) {\n        if (aKeys[i] !== bKeys[i]) {\n            return false;\n        }\n    }\n    // Possibly expensive deep equality test for each corresponding key:\n    for (i = 0; i < aKeys.length; i++) {\n        key = aKeys[i];\n        if (!deepEqual(a[key], b[key])) {\n            return false;\n        }\n    }\n    return typeA === typeB;\n}\n", "export const env = globalThis.fastly.env.get;", "export const getGeolocationForIpAddress = globalThis.fastly.getGeolocationForIpAddress;", "/* eslint-env serviceworker */\n/* global fastly */\nimport { pass, fail, assert, assertThrows } from \"../../../assertions.js\";\nimport { env } from 'fastly:env';\nimport { getGeolocationForIpAddress } from 'fastly:geolocation';\n\naddEventListener(\"fetch\", event => {\n  event.respondWith(app(event))\n})\n/**\n* @param {FetchEvent} event\n* @returns {Response}\n*/\nasync function app(event) {\n  try {\n    throw new Error('uh oh ')\n    const path = (new URL(event.request.url)).pathname;\n    console.log(`path: ${path}`)\n    console.log(`FASTLY_SERVICE_VERSION: ${env('FASTLY_SERVICE_VERSION')}`)\n    if (routes.has(path)) {\n      const routeHandler = routes.get(path);\n      return await routeHandler()\n    }\n    return fail(`${path} endpoint does not exist`)\n  } catch (error) {\n    console.error(error)\n    return fail(`The routeHandler threw an error: ${error.message}` + '\\n' + error.stack)\n  }\n}\n\nconst routes = new Map();\nroutes.set('/', () => {\n  routes.delete('/');\n  let test_routes = Array.from(routes.keys())\n  return new Response(JSON.stringify(test_routes), { 'headers': { 'content-type': 'application/json' } });\n});\n\nroutes.set(\"/fastly/getgeolocationforipaddress/interface\", async function () {\n  let actual = Reflect.getOwnPropertyDescriptor(fastly, 'getGeolocationForIpAddress')\n  expected = {\n    writable: true,\n    enumerable: true,\n    configurable: true,\n    value: fastly.getGeolocationForIpAddress\n  }\n  let error = assert(actual, expected, `Reflect.getOwnPropertyDescriptor(fastly, 'getGeolocationForIpAddress)`)\n  if (error) { return error }\n\n  error = assert(typeof fastly.getGeolocationForIpAddress, 'function', `typeof fastly.getGeolocationForIpAddress`)\n  if (error) { return error }\n\n  actual = Reflect.getOwnPropertyDescriptor(fastly.getGeolocationForIpAddress, 'length')\n  expected = {\n    value: 1,\n    writable: false,\n    enumerable: false,\n    configurable: true\n  }\n  error = assert(actual, expected, `Reflect.getOwnPropertyDescriptor(fastly.getGeolocationForIpAddress, 'length')`)\n  if (error) { return error }\n\n  actual = Reflect.getOwnPropertyDescriptor(fastly.getGeolocationForIpAddress, 'name')\n  expected = {\n    value: \"getGeolocationForIpAddress\",\n    writable: false,\n    enumerable: false,\n    configurable: true\n  }\n  error = assert(actual, expected, `Reflect.getOwnPropertyDescriptor(fastly.getGeolocationForIpAddress, 'name')`)\n  if (error) { return error }\n\n  return pass()\n});\n\nroutes.set(\"/fastly/getgeolocationforipaddress/called-as-constructor\", async () => {\n  let error = assertThrows(() => {\n    new fastly.getGeolocationForIpAddress('1.2.3.4')\n  }, TypeError, `fastly.getGeolocationForIpAddress is not a constructor`)\n  if (error) { return error }\n  return pass()\n});\n// https://tc39.es/ecma262/#sec-tostring\nroutes.set(\"/fastly/getgeolocationforipaddress/parameter-calls-7.1.17-ToString\", async () => {\n  let sentinel;\n  const test = () => {\n    sentinel = Symbol();\n    const key = {\n      toString() {\n        throw sentinel;\n      }\n    }\n    fastly.getGeolocationForIpAddress(key)\n  }\n  let error = assertThrows(test)\n  if (error) { return error }\n  try {\n    test()\n  } catch (thrownError) {\n    let error = assert(thrownError, sentinel, 'thrownError === sentinel')\n    if (error) { return error }\n  }\n  error = assertThrows(() => {\n    fastly.getGeolocationForIpAddress(Symbol())\n  }, Error, `can't convert symbol to string`)\n  if (error) { return error }\n  return pass()\n});\nroutes.set(\"/fastly/getgeolocationforipaddress/parameter-not-supplied\", async () => {\n  let error = assertThrows(() => {\n    fastly.getGeolocationForIpAddress()\n  }, TypeError, `fastly.getGeolocationForIpAddress: At least 1 argument required, but only 0 passed`)\n  if (error) { return error }\n  return pass()\n});\nroutes.set(\"/fastly/getgeolocationforipaddress/parameter-empty-string\", async () => {\n  let error = assertThrows(() => {\n    fastly.getGeolocationForIpAddress('')\n  }, Error, `Invalid address passed to fastly.getGeolocationForIpAddress`)\n  if (error) { return error }\n  return pass()\n});\n\nlet ipv4Expected = {\n  as_name: \"sky uk limited\",\n  as_number: 5607,\n  area_code: 0,\n  city: \"tower hamlets\",\n  conn_speed: \"broadband\",\n  conn_type: \"wifi\",\n  continent: \"EU\",\n  country_code: \"GB\",\n  country_code3: \"GBR\",\n  country_name: \"united kingdom\",\n  gmt_offset: 0,\n  latitude: 51.52,\n  longitude: -0.06,\n  metro_code: 826044,\n  postal_code: \"e1 5bt\",\n  proxy_description: \"?\",\n  proxy_type: \"?\",\n  region: \"TWH\",\n  utc_offset: 0\n};\n\nroutes.set(\"/fastly/getgeolocationforipaddress/parameter-ipv4-string\", async () => {\n  let geo = fastly.getGeolocationForIpAddress('2.216.196.179')\n  let error = assert(geo, ipv4Expected, `fastly.getGeolocationForIpAddress('2.216.196.179') == ipv4Expected`)\n  if (error) { return error }\n  return pass()\n});\n\nlet expected = {\n  as_name: \"softlayer technologies inc.\",\n  as_number: 36351,\n  area_code: 214,\n  city: \"dallas\",\n  conn_speed: \"broadband\",\n  conn_type: \"wired\",\n  continent: \"NA\",\n  country_code: \"US\",\n  country_code3: \"USA\",\n  country_name: \"united states\",\n  gmt_offset: -600,\n  latitude: 32.94,\n  longitude: -96.84,\n  metro_code: 623,\n  postal_code: \"75244\",\n  proxy_description: \"?\",\n  proxy_type: \"hosting\",\n  region: \"TX\",\n  utc_offset: -600\n}\nroutes.set(\"/fastly/getgeolocationforipaddress/parameter-compressed-ipv6-string\", async () => {\n  let geo = fastly.getGeolocationForIpAddress('2607:f0d0:1002:51::4')\n  console.log({ geo })\n  let error = assert(geo, expected, `fastly.getGeolocationForIpAddress('2607:f0d0:1002:51::4') == expected`)\n  if (error) { return error }\n  return pass()\n});\nroutes.set(\"/fastly/getgeolocationforipaddress/parameter-shortened-ipv6-string\", async () => {\n  let geo = fastly.getGeolocationForIpAddress('2607:f0d0:1002:0051:0:0:0:0004')\n  let error = assert(geo, expected, `fastly.getGeolocationForIpAddress('2607:f0d0:1002:0051:0:0:0:0004') == expected`)\n  if (error) { return error }\n  return pass()\n});\nroutes.set(\"/fastly/getgeolocationforipaddress/parameter-expanded-ipv6-string\", async () => {\n  let geo = fastly.getGeolocationForIpAddress('2607:f0d0:1002:0051:0000:0000:0000:0004')\n  let error = assert(geo, expected, `fastly.getGeolocationForIpAddress('2607:f0d0:1002:0051:0000:0000:0000:0004') == expected`)\n  if (error) { return error }\n  return pass()\n});\n// TODO: Uncomment these tests once IPv4-in-6 is working in ipll\n// routes.set(\"/fastly/getgeolocationforipaddress/parameter-dual-ipv4-ipv6-string\", async () => {\n//   let geo = fastly.getGeolocationForIpAddress('::FFFF:2.216.196.179')\n//   let error = assert(geo, expected, `fastly.getGeolocationForIpAddress('::2.216.196.179') == expected`)\n//   if (error) { return error }\n//   return pass()\n// });\n\nroutes.set(\"/fastly/getgeolocationforipaddress/called-unbound\", async () => {\n  let geo = fastly.getGeolocationForIpAddress.call(undefined, '2607:f0d0:1002:0051:0000:0000:0000:0004')\n  let error = assert(geo, expected, `fastly.getGeolocationForIpAddress.call(undefined, '2607:f0d0:1002:0051:0000:0000:0000:0004') == expected`)\n  if (error) { return error }\n  return pass()\n});\n\nroutes.set('/fastly:geolocation', async () => {\n  let error = assert(getGeolocationForIpAddress, fastly.getGeolocationForIpAddress, 'getGeolocationForIpAddress === fastly.getGeolocationForIpAddress');\n  if (error) { return error }\n  return pass()\n});\n"],
  "mappings": "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",
  "names": ["expected", "error"]
}
